{"version":3,"sources":["views/Farms/components/types.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/StakeActionsContainer.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Hero.tsx","views/Farms/Farms.tsx","utils/getLiquidityUrlPathParts.ts","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/FarmCard/ApyButton.tsx"],"names":["ViewMode","Wrapper","styled","div","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","t","useTranslation","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","StyledTokenImage","img","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","flexDirection","split","variant","outline","src","alt","AnnualRoiContainer","AnnualRoiDisplay","Text","DepositModal","max","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","e","currentTarget","validity","valid","value","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","Modal","onSelectMax","onChange","inputTitle","mt","mr","color","onClick","scale","disabled","isFinite","eq","a","console","error","style","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StyledStakeButton","Button","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","displayBalance","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","fontSize","decimals","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","StyledHarvestButton","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isGreaterThan","useERC20","textTransform","pr","bold","StyledEnableButton","StakeActionsContainer","requestedApproval","isApproved","handleApprove","lpSymbol","UnlockWalletButton","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","Space","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","liquidityUrlPathParts","dual","earnLabel","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","BASE_ADD_LIQUIDITY_URL","isCommunity","display","ApyButton","CardActionsContainer","flex","ExpandableSectionButton","expanded","showLabel","closeLabel","border","getBscScanLink","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","endLeft","show","endRight","theme","mediaQueries","sm","StyledHeroSection","PageSection","StyledMobileImage","md","StyledDesktopImage","Hero","useTheme","innerProps","padding","margin","index","hasCurvedDivider","ControlContainer","ToggleWrapper","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","data","userDataLoaded","query","usePersistState","TABLE","localStorageKey","sortOption","chosenFarmsLength","useRef","isArchived","isInactive","isActive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","toLowerCase","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","Number","slice","sortFarms","current","length","useEffect","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","originalValue","label","earned","details","Page","checked","exact","Loading","ref","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","xs","StyledErrorMessage","ModalInput","isBalanceZero","position","pl","balance","balanceBigNumber","pattern","inputMode","step","min","placeholder","external","ApyLabelContainer","useFarmUser","onPresentApyModal","event","stopPropagation","ml"],"mappings":"sNA+FYA,E,6OCjFNC,EAAUC,IAAOC,IAAV,iDAIPC,EAAqBF,YAAOG,KAAPH,CAAH,iDA6BTI,EAzB0C,SAAC,GAOnD,IANLC,EAMI,EANJA,eACAC,EAKI,EALJA,YACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,QACAC,EACI,EADJA,gBAEQC,EAAMC,cAAND,EAER,OACE,eAACZ,EAAD,WACE,eAAC,IAAD,CAAMc,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOF,EAAE,mBAAT,OACCH,EAAsB,cAAC,KAAD,UAAOA,IAA8B,cAAC,KAAD,CAAUM,MAAO,GAAIC,OAAQ,SAEzFR,GACA,cAACL,EAAD,CAAoBc,KAAMN,EAA1B,SAA4CC,EAAE,eAAgB,CAAEM,OAAQR,MAE1E,cAACP,EAAD,CAAoBc,KAAMX,EAA1B,SAA2CM,EAAE,mBAC7C,cAACT,EAAD,CAAoBc,KAAMV,EAA1B,SAAwCK,EAAE,uB,UC3B1CZ,GAAUC,YAAOkB,IAAPlB,CAAH,kEAMPmB,GAAgBnB,YAAOoB,KAAPpB,CAAH,kDAIbqB,GAAmBrB,IAAOsB,IAAV,4CAqBPC,GAjBuC,SAAC,GAAiE,IAA/Dd,EAA8D,EAA9DA,QAA8D,EAArDe,WAAqD,EAAzCC,gBAAyC,EAAxBC,MAAwB,EAAjBC,WACpG,OACE,eAAC,GAAD,CAASd,eAAe,gBAAgBe,WAAW,SAASC,GAAG,OAA/D,UACE,eAAC,IAAD,CAAMC,cAAc,SAASF,WAAW,aAAxC,UACE,eAAC,IAAD,CAASC,GAAG,MAAZ,UAAmBpB,EAAQsB,MAAM,KAAK,GAAtC,SACA,eAAC,IAAD,CAAMlB,eAAe,SAArB,UAEE,cAACM,GAAD,CAAea,QAAQ,UAAUC,SAAO,EAAxC,iBACA,cAAC,KAAD,UAGJ,cAACZ,GAAD,CAAkBa,IAAI,6BAA6BC,IAAI,kB,iHC7BvDC,GAAqBpC,YAAOkB,IAAPlB,CAAH,gDAIlBqC,GAAmBrC,YAAOsC,KAAPtC,CAAH,uIA0JPuC,GAnImC,SAAC,GAa5C,IAZLC,EAYI,EAZJA,IACAC,EAWI,EAXJA,cACAC,EAUI,EAVJA,UACAC,EASI,EATJA,UASI,IARJC,iBAQI,MARQ,GAQR,EAPJpB,EAOI,EAPJA,WACAqB,EAMI,EANJA,WACAC,EAKI,EALJA,QACArC,EAII,EAJJA,QACAsC,EAGI,EAHJA,IACArC,EAEI,EAFJA,gBACAsC,EACI,EADJA,UAEA,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAqCC,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtB,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAkDP,oBAAS,GAA3D,mBAAOQ,EAAP,KAA0BC,EAA1B,KACQ/C,EAAMC,cAAND,EACFgD,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsBrB,KAC5B,CAACA,IAEEsB,EAAkB,IAAIC,IAAUb,GAChCc,EAAoB,IAAID,IAAUJ,GAElCM,EAAaH,EAAgBI,MAAMpB,GAEnCqB,EAAoBC,aAAqB,CAC7CC,eAAiBP,EAAgBQ,QAAkC,EAAxBL,EAAWM,WACtDxB,MACAyB,kBAAmBxB,EAAUuB,aAGzBE,EAAYzB,EAAUkB,MAAMC,EAAkB,IAC9CO,EAAqBC,YACzBF,EAAUF,WACVE,EAAUG,GAAG,KAAS,EAAI,EAC1BH,EAAUG,GAAG,KAAS,EAAI,GAGtBC,EAAeC,uBACnB,SAACC,GACKA,EAAEC,cAAcC,SAASC,OAC3B/B,EAAO4B,EAAEC,cAAcG,MAAMC,QAAQ,KAAM,QAG/C,CAACjC,IAGGkC,EAAkBP,uBAAY,WAClC3B,EAAOQ,KACN,CAACA,EAAaR,IAEjB,OAAIM,EAEA,cAAC6B,GAAA,EAAD,CACEC,UAAW5E,EAAE,eAAgB,CAAEM,OAAQR,IACvC+E,oBAAqB/C,EAAcgD,KAAKjD,GACxCkD,mBAAoB9C,EACpB+C,kBAAmB7C,EAAQyB,WAC3BC,kBAAmBxB,EAAUuB,WAC7BxB,IAAKA,EACLvB,WAAYA,EACZqB,WAAYA,EACZ+C,SAAUlF,EACVmF,QAAM,EACNC,aAAc5C,EACd6C,OAAQ,kBAAMrC,GAAqB,MAMvC,eAAC,KAAD,CAAOsC,MAAOrF,EAAE,mBAAoBgC,UAAWA,EAA/C,UACE,cAACsD,GAAA,EAAD,CACEd,MAAOjC,EACPgD,YAAab,EACbc,SAAUtB,EACVrC,IAAKmB,EACL1C,OAAQ2B,EACRlC,gBAAiBA,EACjB0F,WAAYzF,EAAE,WAEhB,eAAC,IAAD,CAAM0F,GAAG,OAAOzE,WAAW,SAASf,eAAe,gBAAnD,UACE,eAAC,KAAD,CAAMyF,GAAG,MAAMC,MAAM,aAArB,UACG5F,EAAE,+BADL,OAGA,eAACyB,GAAD,CAAoBR,WAAW,SAAS4E,QAAS,kBAAM9C,GAAqB,IAA5E,UACE,eAACrB,GAAD,eAAoBqC,KACpB,cAAC,KAAD,CAAY1C,QAAQ,OAAOyE,MAAM,KAAjC,SACE,cAAC,IAAD,CAAeF,MAAM,aAAazF,MAAM,iBAI9C,eAACmF,GAAA,EAAD,WACE,cAAC,IAAD,CAAQjE,QAAQ,YAAYwE,QAAS7D,EAAW7B,MAAM,OAAO4F,SAAUnD,EAAvE,SACG5C,EAAE,YAEL,cAAC,IAAD,CACEG,MAAM,OACN4F,SACEnD,IAAcO,EAAgB6C,YAAc7C,EAAgB8C,GAAG,IAAM9C,EAAgBc,GAAGZ,GAE1FwC,QAAO,wBAAE,uBAAAK,EAAA,6DACPrD,GAAa,GADN,kBAGCd,EAAUQ,GAHX,OAILG,EAAa1C,EAAE,WAAYA,EAAE,4CAC7BgC,IALK,gDAOLW,EACE3C,EAAE,SACFA,EAAE,uFAEJmG,QAAQC,MAAR,MAXK,yBAaLvD,GAAa,GAbR,4EALX,SAsBe7C,EAAZ4C,EAAc,aAAkB,gBAGrC,cAAC,KAAD,CAAcvC,KAAMN,EAAiBsG,MAAO,CAAEC,UAAW,UAAzD,SACGtG,EAAE,eAAgB,CAAEM,OAAQ2B,UClFtBsE,GAlEqC,SAAC,GAAmD,IAAjDxE,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWH,EAA0B,EAA1BA,IAA0B,IAArBI,iBAAqB,MAAT,GAAS,EACrG,EAAsBK,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAqCC,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtB,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACQ7C,EAAMC,cAAND,EACFgD,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsBrB,KAC5B,CAACA,IAEE2E,EAAY,IAAIpD,IAAUb,GAC1Bc,EAAoB,IAAID,IAAUJ,GAElCkB,EAAeC,uBACnB,SAACC,GACKA,EAAEC,cAAcC,SAASC,OAC3B/B,EAAO4B,EAAEC,cAAcG,MAAMC,QAAQ,KAAM,QAG/C,CAACjC,IAGGkC,EAAkBP,uBAAY,WAClC3B,EAAOQ,KACN,CAACA,EAAaR,IAEjB,OACE,eAAC,KAAD,CAAO6C,MAAOrF,EAAE,qBAAsBgC,UAAWA,EAAjD,UACE,cAACsD,GAAA,EAAD,CACEC,YAAab,EACbc,SAAUtB,EACVM,MAAOjC,EACPV,IAAKmB,EACL1C,OAAQ2B,EACRwD,WAAYzF,EAAE,aAEhB,eAACsF,GAAA,EAAD,WACE,cAAC,IAAD,CAAQjE,QAAQ,YAAYwE,QAAS7D,EAAW7B,MAAM,OAAO4F,SAAUnD,EAAvE,SACG5C,EAAE,YAEL,cAAC,IAAD,CACE+F,SAAUnD,IAAc4D,EAAUR,YAAcQ,EAAUP,GAAG,IAAMO,EAAUvC,GAAGZ,GAChFwC,QAAO,wBAAE,uBAAAK,EAAA,6DACPrD,GAAa,GADN,kBAGCd,EAAUQ,GAHX,OAILG,EAAa1C,EAAE,aAAcA,EAAE,0DAC/BgC,IALK,gDAOLW,EACE3C,EAAE,SACFA,EAAE,uFAEJmG,QAAQC,MAAR,MAXK,yBAaLvD,GAAa,GAbR,4EAgBT1C,MAAM,OAlBR,SAoBeH,EAAZ4C,EAAc,aAAkB,oB,UCzD5B6D,GAbS,SAACC,GACvB,IAAMC,EAAqBC,eAS3B,MAAO,CAAEC,UAPa1C,sBAAW,yCAC/B,WAAO2C,GAAP,UAAAZ,EAAA,sEACQa,aAAYJ,EAAoBD,EAAKI,GAD7C,2CAD+B,sDAI/B,CAACH,EAAoBD,MCOVM,GAdO,SAACN,GACrB,IAAMC,EAAqBC,eAU3B,MAAO,CAAEK,QARW9C,sBAAW,yCAC7B,WAAO2C,GAAP,gBAAAZ,EAAA,sEACuBgB,aAAUP,EAAoBD,EAAKI,GAD1D,OACQK,EADR,OAEEhB,QAAQiB,KAAKD,GAFf,2CAD6B,sDAK7B,CAACR,EAAoBD,MCkBnBW,GAAoBhI,IAAOC,IAAV,8EAOjBgI,GAAoBjI,YAAOkI,IAAPlI,CAAH,gGA8GRmI,GAxGqC,SAAC,GAW9C,IAVL1F,EAUI,EAVJA,cACA2F,EASI,EATJA,aACAxF,EAQI,EARJA,UACAyE,EAOI,EAPJA,IACA7F,EAMI,EANJA,WACAuB,EAKI,EALJA,IACAF,EAII,EAJJA,WACAnC,EAGI,EAHJA,gBACAsC,EAEI,EAFJA,UACAvC,EACI,EADJA,QAEQE,EAAMC,cAAND,EACAiH,EAAYD,GAAcN,GAA1BO,QACAJ,EAAcJ,GAAgBC,GAA9BG,UACFa,EAAWC,cACXC,EAAWC,eACTC,EAAYC,cAAZD,QACF3F,EAAU6F,YAAgB/F,GAE1BgG,EAAW,yCAAG,WAAOnB,GAAP,UAAAZ,EAAA,sEACZe,EAAQH,GADI,OAElBc,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACzB,MAFhC,2CAAH,sDAKX0B,EAAa,yCAAG,WAAOtB,GAAP,UAAAZ,EAAA,sEACdW,EAAUC,GADI,OAEpBc,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACzB,MAF9B,2CAAH,sDAKb2B,EAAiBlE,uBAAY,WACjC,IAAMmE,EAAyBC,YAAiBzG,GAChD,OAAIwG,EAAuBrE,GAAG,IAAMqE,EAAuBE,GAAG,MACrD,aAELF,EAAuBrE,GAAG,GACrBqE,EAAuBG,QAAQ,EAAGrF,IAAUsF,YAE9CJ,EAAuBG,QAAQ,EAAGrF,IAAUsF,cAClD,CAAC5G,IAEJ,EAA2B6G,aACzB,cAAC,GAAD,CACE9G,IAAK4F,EACL3F,cAAeA,EACfC,UAAWkG,EACXhG,UAAWA,EACXpB,WAAYA,EACZsB,QAASA,EACTrC,QAASA,EACTsC,IAAKA,EACLF,WAAYA,EACZnC,gBAAiBA,EACjBsC,UAAWA,KAZRuG,EAAP,oBAeA,EAA4BD,aAC1B,cAAC,GAAD,CAAe9G,IAAKC,EAAeC,UAAWqG,EAAenG,UAAWA,KADnE4G,EAAP,oBA4BA,OACE,eAAC,IAAD,CAAM3I,eAAe,gBAAgBe,WAAW,SAAhD,UACE,eAAC,IAAD,CAAME,cAAc,SAASF,WAAW,aAAxC,UACE,cAAC,IAAD,CAAS2E,MAAO9D,EAAcmE,GAAG,GAAK,eAAiB,OAAvD,SAAgEoC,MAC/DvG,EAAcmC,GAAG,IAAM9B,EAAQ8B,GAAG,IACjC,cAAC6E,GAAA,EAAD,CACEC,SAAS,OACTnD,MAAM,aACNoD,SAAU,EACVxE,MAAOyE,YAAiB9G,EAAQoB,MAAMzB,IACtCoH,KAAK,OACLC,OAAO,SAlCRrH,EAAcmE,GAAG,GACtB,cAACqB,GAAD,CACEzB,QAAS+C,EACT7C,SAAU,CAAC,UAAW,YAAYqD,MAAK,SAACC,GAAD,OAAU3B,EAAS4B,SAASC,SAASF,MAF9E,SAIGrJ,EAAE,cAGL,eAACqH,GAAD,WACE,cAAC,KAAD,CAAYhG,QAAQ,WAAWwE,QAASgD,EAAmBlD,GAAG,MAA9D,SACE,cAAC,KAAD,CAAWC,MAAM,UAAUzF,MAAM,WAEnC,cAAC,KAAD,CACEkB,QAAQ,WACRwE,QAAS+C,EACT7C,SAAU,CAAC,UAAW,YAAYqD,MAAK,SAACC,GAAD,OAAU3B,EAAS4B,SAASC,SAASF,MAH9E,SAKE,cAAC,IAAD,CAASzD,MAAM,UAAUzF,MAAM,kBC3G1BqJ,GAVQ,SAACC,GACtB,IAAM9C,EAAqBC,eAM3B,MAAO,CAAE8C,SAJavF,sBAAW,wBAAC,uBAAA+B,EAAA,sEAC1ByD,aAAYhD,EAAoB8C,GADN,2CAE/B,CAACA,EAAS9C,MCWTiD,GAAsBvK,YAAOkI,IAAPlI,CAAH,gGAgDVwK,GA1CuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAUpD,EAAU,EAAVA,IACzDoB,EAAYC,cAAZD,QACR,EAAqCrF,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACd3C,EAAMC,cAAND,EACR,EAAkCsC,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACQ6G,EAAaF,GAAe9C,GAA5BgD,SACFrH,EAAY0H,cACZnC,EAAWC,eACXmC,EAAqBlC,EAAUS,YAAiBuB,GAAYG,KAC3CD,EAAmBvB,QAAQ,EAAGrF,IAAUsF,YAC1CsB,GAAqBA,EAAmBE,aAAa7H,GAAWuB,WAErF,OACE,cAAC,IAAD,CAAM1D,eAAe,gBAAgBe,WAAW,SAAhD,SACE,cAAC2I,GAAD,CACE7D,SAAUiE,EAAmB/D,GAAG,IAAMrD,EACtCiD,QAAO,wBAAE,uBAAAK,EAAA,6DACPrD,GAAa,GADN,kBAGC6G,IAHD,OAILhH,EAAa,GAAD,OACP1C,EAAE,aADK,KAEVA,EAAE,wDAAyD,CAAEM,OAAQ,UANlE,gDASLqC,EACE3C,EAAE,SACFA,EAAE,uFAEJmG,QAAQC,MAAR,MAbK,yBAeLvD,GAAa,GAfR,qBAiBP+E,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACzB,MAjB3C,+DAFX,SAsBG1G,EAAE,gB,mBCtCImK,GAnBQ,SAACC,GACtB,IAAMzD,EAAqBC,eACnByD,EAAqBC,eAArBD,iBAcR,MAAO,CAAEE,UAbapG,sBAAW,wBAAC,+BAAA+B,EAAA,+EAEbmE,EAAiBD,EAAY,UAAW,CACvDzD,EAAmB6D,QACnBC,KAAOC,UAAUC,aAJW,cAExBC,EAFwB,gBAMRA,EAAGC,OANK,cAMxBC,EANwB,yBAOvBA,EAAQC,QAPe,4DASvB,GATuB,0DAW/B,CAACX,EAAYzD,EAAoB0D,MCFhCW,GAAS3L,IAAOC,IAAV,4BAgGG2L,IA7FY5L,YAAOkI,IAAPlI,CAAH,gGAkB4B,SAAC,GAA4D,IAA1D6L,EAAyD,EAAzDA,KAAMpD,EAAmD,EAAnDA,QACnD9H,GADsG,EAA1CD,gBAA0C,EAAzBsC,UAAyB,EAAdvC,QAClFG,cAAND,GACR,EAAkDsC,oBAAS,GAA3D,mBAA0B6I,GAA1B,WACQzE,EAAqBwE,EAArBxE,IAAK0E,EAAgBF,EAAhBE,YACb,EAKIF,EAAKG,UAAY,GALrB,IACEC,UAAWC,OADb,MACiC,EADjC,MAEE9D,aAAc+D,OAFhB,MAEuC,EAFvC,MAGE1J,cAAe2J,OAHjB,MAGyC,EAHzC,MAIE3B,SAAU4B,OAJZ,MAI+B,EAJ/B,EAMMJ,EAAY,IAAIlI,IAAUmI,GAG1BzB,GAFe,IAAI1G,IAAUoI,GACb,IAAIpI,IAAUqI,GACnB,IAAIrI,IAAUsI,IACzBC,EAAYC,YAAWR,GAEvBxD,GADaE,GAAWwD,GAAaA,EAAUO,cAAc,GAClDhE,gBAEXuC,EAAa0B,aAASH,GAEpBpB,EAAcJ,GAAeC,GAA7BG,UAGFlC,GADqBP,EAAUS,YAAiBuB,GAAYG,MACxBxB,QAAQ,EAAGrF,IAAUsF,YAEzCvE,sBAAW,wBAAC,uBAAA+B,EAAA,sEAE9BiF,GAAqB,GAFS,SAGxBZ,IAHwB,OAI9B3C,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACzB,MAClDyE,GAAqB,GALS,gDAO9BhF,QAAQC,MAAR,MAP8B,yDAS/B,CAACmE,EAAW3C,EAAUE,EAASpB,IAqBlC,OACE,cAACsE,GAAD,UACE,eAAC,IAAD,CAAM9K,eAAe,gBAAgBe,WAAW,SAASC,GAAG,OAA5D,UACE,eAAC,IAAD,WACE,cAAC,KAAD,CAAM6K,cAAc,YAAYC,GAAG,MAAnC,kBAGA,cAAC,KAAD,CAAMD,cAAc,YAApB,SACG/L,EAAE,aAEL,cAAC,KAAD,CAAMiM,MAAI,EAACF,cAAc,YAAzB,SACG1D,OAGL,cAAC,GAAD,CAAeyB,SAAUA,EAAUpD,IAAKA,W,UC1F1CwF,GAAqB7M,YAAOkI,IAAPlI,CAAH,gGAgFT8M,GA9DyD,SAAC,GAA4D,IAA1DjB,EAAyD,EAAzDA,KAAMpD,EAAmD,EAAnDA,QAAS/H,EAA0C,EAA1CA,gBAAiBsC,EAAyB,EAAzBA,UAAWvC,EAAc,EAAdA,QAC5GE,EAAMC,cAAND,EACR,EAAkDsC,oBAAS,GAA3D,mBAAO8J,EAAP,KAA0BjB,EAA1B,KACQzE,EAAqBwE,EAArBxE,IAAK0E,EAAgBF,EAAhBE,YACb,EAKIF,EAAKG,UAAY,GALrB,IACEC,UAAWC,OADb,MACiC,EADjC,MAEE9D,aAAc+D,OAFhB,MAEuC,EAFvC,MAGE1J,cAAe2J,OAHjB,MAGyC,EAHzC,MAIE3B,SAAU4B,OAJZ,MAI+B,EAJ/B,EAMMJ,EAAY,IAAIlI,IAAUmI,GAC1B9D,EAAe,IAAIrE,IAAUoI,GAC7B1J,EAAgB,IAAIsB,IAAUqI,GAC9B3B,EAAW,IAAI1G,IAAUsI,GACzBC,EAAYC,YAAWR,GACvBiB,EAAavE,GAAWwD,GAAaA,EAAUO,cAAc,GAC7DjE,EAAWC,eAEXuC,EAAa0B,aAASH,GAEpBpB,EAAcJ,GAAeC,GAA7BG,UAKF+B,IAHqBxE,EAAUS,YAAiBuB,GAAYG,MACxBxB,QAAQ,EAAGrF,IAAUsF,YAEzCvE,sBAAW,wBAAC,uBAAA+B,EAAA,sEAE9BiF,GAAqB,GAFS,SAGxBZ,IAHwB,OAI9B3C,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACzB,MAClDyE,GAAqB,GALS,gDAO9BhF,QAAQC,MAAR,MAP8B,yDAS/B,CAACmE,EAAW3C,EAAUE,EAASpB,KAqBlC,OACE,mCACIoB,EApBGuE,EACL,cAAC,GAAD,CACEvK,cAAeA,EACf2F,aAAcA,EACdxF,UAAWiJ,EAAKqB,SAChB7F,IAAKA,EACLtE,IAAK8I,EAAK9I,IACVtC,QAASA,EACTuC,UAAWA,EACXtC,gBAAiBA,IAGnB,cAAC,GAAD,CAAoBI,MAAM,OAAO4F,SAAUqG,EAAmBvG,QAASyG,EAAvE,SACGtM,EAAE,YAOO,cAACwM,GAAA,EAAD,CAAoBrM,MAAM,OAAOkB,QAAQ,QAAQsE,GAAG,W,UCrEhE8G,GAAapN,YAAOqN,IAAPrN,CAAH,iFAKVsN,GAAyBtN,YAAOkB,IAAPlB,CAAH,mIAOtBuN,GAAmBvN,IAAOC,IAAV,wFAMhBuN,GAAQxN,IAAOC,IAAV,mLAgIIwN,GAhH2B,SAAC,GAAuD,IAArD5B,EAAoD,EAApDA,KAAMhJ,EAA8C,EAA9CA,WAAYtC,EAAkC,EAAlCA,QAASyC,EAAyB,EAAzBA,UAAWyF,EAAc,EAAdA,QACzE9H,EAAMC,cAAND,EAER,EAA0DsC,oBAAS,GAAnE,mBAAOyK,EAAP,KAA8BC,EAA9B,KAEMnN,EACJqL,EAAK+B,WAAa/B,EAAK+B,UAAUhJ,GAAG,GAApC,WACQiH,EAAK+B,UAAUrJ,WAAWsJ,oBAAeC,EAAW,CAAEC,sBAAuB,KACjF,GAEAtN,EAAUoL,EAAKqB,UAAYrB,EAAKqB,SAASc,cAAc5I,QAAQ,UAAW,IAG1E6I,GAFYpC,EAAKqC,KAAOrC,EAAKqC,KAAKC,UAAYxN,EAAE,eAExByN,YAAyB,CACrDC,kBAAmBxC,EAAKlK,WAAWwJ,QACnCmD,aAAczC,EAAKnK,MAAMyJ,WAErBzK,EAAe,UAAM6N,IAAN,YAAgCN,GAC/C3B,EAAYC,YAAWV,EAAKE,aACXF,EAAKnK,MAAMT,OAElC,OACE,eAACmM,GAAD,WACE,eAACE,GAAD,WACE,cAAC,GAAD,CACE7M,QAASA,EACTe,WAAYqK,EAAKrK,WACjBC,gBAAiBoK,EAAK2C,YACtB9M,MAAOmK,EAAKnK,MACZC,WAAYkK,EAAKlK,aAEnB,cAAC6L,GAAD,KACEjN,GACA,eAAC,IAAD,CAAMM,eAAe,gBAAgBe,WAAW,SAASC,GAAG,OAA5D,UACE,eAAC,KAAD,WAAOlB,EAAE,OAAT,OACA,cAAC,KAAD,CAAMiM,MAAI,EAAC5F,MAAO,CAAEyH,QAAS,OAAQ7M,WAAY,UAAjD,SACGiK,EAAK9I,IACJ,cAAC2L,GAAA,EAAD,CACE1M,QAAQ,kBACRqF,IAAKwE,EAAKxE,IACV6F,SAAUrB,EAAKqB,SACf1L,WAAYqK,EAAKrK,WACjBf,QAASA,EACTC,gBAAiBA,EACjBsC,UAAWA,EACXD,IAAK8I,EAAK9I,IACVF,WAAYA,IAGd,cAAC,KAAD,CAAU9B,OAAQ,GAAID,MAAO,UAKrC,eAAC,IAAD,CAAMD,eAAe,gBAAgBgB,GAAG,OAAxC,UACE,eAAC,KAAD,WAAOlB,EAAE,SAAT,OACA,cAAC,KAAD,CAAMiM,MAAI,EAAV,SAAYnM,OAEd,eAAC,IAAD,CAAMI,eAAe,gBAAgBgB,GAAG,OAAxC,UACE,eAAC,KAAD,WAAOlB,EAAE,QAAT,OAEA,cAAC,KAAD,CAAMiM,MAAI,EAAV,SAAYjM,EAAE,YAEhB,eAAC,IAAD,CAAME,eAAe,gBAAgBgB,GAAG,OAAxC,UACE,eAAC,KAAD,WAAOlB,EAAE,gBAAT,OACA,cAAC,KAAD,CAAMiM,MAAI,EAAV,mBAEF,cAACY,GAAD,IACA,cAACmB,GAAD,CACE9C,KAAMA,EACNpL,QAASA,EACTgI,QAASA,EACTzF,UAAWA,EACXtC,gBAAiBA,OAGrB,eAAC6M,GAAD,WACE,eAAC,IAAD,CAAM1M,eAAe,gBAArB,UACE,cAAC,IAAD,CAAM+N,KAAK,IAAX,SACE,cAAC,GAAD,CACE/C,KAAMA,EACNpL,QAASA,EACTgI,QAASA,EACTzF,UAAWA,EACXtC,gBAAiBA,MAGrB,cAAC,IAAD,CAAMkO,KAAK,IAAI/N,eAAe,SAA9B,SACE,cAACgO,EAAA,EAAD,CACErI,QAAS,kBAAMmH,GAA0BD,IACzCoB,SAAUpB,EACVqB,UAAWpO,EAAE,YACbqO,WAAYrO,EAAE,YACdsO,OAAO,iBAIZvB,GACC,cAAC,EAAD,CACEnN,QAASA,EACTF,eAAgB6O,YAAe5C,EAAW,WAC1ChM,YAAW,wCAAmCgM,GAC9C9L,oBAAqBA,EACrBC,QAASA,EACTC,gBAAiBA,W,SClHdyO,GArCuC,SAAC,GAAiC,IAKlFC,EALmDC,EAA8B,EAA9BA,wBAC/CC,EAAQC,cAARD,IACFjH,EAAWC,cACT3H,EAAMC,cAAND,EAGR,OAAQ0H,EAAS4B,UACf,IAAK,SACHmF,EAAc,EACd,MACF,IAAK,iBACHA,EAAc,EACd,MACF,IAAK,kBACHA,EAAc,EACd,MACF,QACEA,EAAc,EAIlB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,CAAYA,YAAaA,EAAapN,QAAQ,UAA9C,UACE,cAAC,IAAD,CAAgBwN,GAAIC,KAAMC,GAAE,UAAKJ,GAAOK,SAAO,EAA/C,SACGhP,EAAE,YAEL,cAAC,KAAD,CAAiBiP,KAAMP,EAAvB,SACE,cAAC,IAAD,CAAgBG,GAAIC,KAAMC,GAAE,UAAKJ,EAAL,YAAoBO,UAAQ,EAAxD,SACGlP,EAAE,sBAUTZ,GAAUC,IAAOC,IAAV,2MAUT,qBAAG6P,MAAkBC,aAAaC,O,SdoC1BlQ,K,cAAAA,E,aAAAA,M,uDetFNmQ,GAAoBjQ,YAAOkQ,KAAPlQ,CAAH,2EAKjBmQ,GAAoBnQ,IAAOsB,IAAV,2GAEnB,qBAAGwO,MAAkBC,aAAaK,MAMhCC,GAAqBrQ,IAAOsB,IAAV,2GAEpB,qBAAGwO,MAAkBC,aAAaK,MAyBvBE,GAnBF,WACG1P,cAAND,EACY+H,cAAZD,QACU8H,eAAVT,MAER,OACE,mCACE,eAACG,GAAD,CACEO,WAAY,CAAExJ,MAAO,CAAEyJ,QAAS,IAAKC,OAAQ,IAAK5P,MAAO,SACzD6P,MAAO,EACPC,kBAAkB,EAHpB,UAKE,cAACT,GAAD,CAAmBjO,IAAI,kCAAkCC,IAAI,WAC7D,cAACkO,GAAD,CAAoBnO,IAAI,2BAA2BC,IAAI,iBCbzD0O,GAAmB7Q,IAAOC,IAAV,kTAWlB,qBAAG6P,MAAkBC,aAAaC,MAOhCc,GAAgB9Q,IAAOC,IAAV,oIAKfqC,MAuBEyO,IAlBe/Q,IAAOC,IAAV,mEACZqC,MAKkBtC,IAAOC,IAAV,gKAMjB,qBAAG6P,MAAkBC,aAAaC,MAMjBhQ,IAAOC,IAAV,qSAWd,qBAAG6P,MAAkBC,aAAaC,OAiBhCgB,IAPchR,YAAOiR,KAAPjR,CAAH,gGAOK,SAACkR,EAAyBC,GAC9C,OAAID,GAAkBC,GACZD,EAAiBC,GAActD,eAAe,QAAS,CAAEE,sBAAuB,IAEtFmD,EACKA,EAAerD,eAAe,QAAS,CAAEE,sBAAuB,IAElE,OA8QMqD,GA3QS,WACtB,IAAQC,EAAS9B,cAAT8B,KACApH,EAAa3B,cAAb2B,SACAtJ,EAAMC,cAAND,EACR,EAA0C2Q,cAA5BC,EAAd,EAAQC,KAAeC,EAAvB,EAAuBA,eACjBzO,EAAY0H,cAClB,EAA0BzH,mBAAS,IAAnC,mBAAOyO,EAAP,KACA,GADA,KACgCC,YAAgB7R,EAAS8R,MAAO,CAAEC,gBAAiB,uBAAnF,mBACQpJ,GADR,UACoBC,cAAZD,SACR,EAAoCxF,mBAAS,OAA7C,mBAAO6O,EAAP,KACMC,GADN,KAC0BC,iBAAO,IAE3BC,EAAahI,EAASC,SAAS,YAC/BgI,EAAajI,EAASC,SAAS,WAC/BiI,GAAYD,IAAeD,EAEjCG,YAAyBH,GAIzB,IAEA,EAAoCI,YAAsBF,GAA1D,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAcjB,EAAQkB,QAAO,SAAC5G,GAAD,OAAuB,IAAbA,EAAKxE,KAAiC,OAApBwE,EAAKrK,aAAwBkR,YAAc7G,EAAKxE,QACzGsL,EAAgBpB,EAAQkB,QAAO,SAAC5G,GAAD,OAAuB,IAAbA,EAAKxE,KAAiC,OAApBwE,EAAKrK,aAAwBkR,YAAc7G,EAAKxE,QAC3GuL,EAAgBrB,EAAQkB,QAAO,SAAC5G,GAAD,OAAU6G,YAAc7G,EAAKxE,QAE5DwL,EAAkBL,EAAYC,QAClC,SAAC5G,GAAD,OAAUA,EAAKG,UAAY,IAAIjI,IAAU8H,EAAKG,SAASvJ,eAAe+J,cAAc,MAGhFsG,EAAsBH,EAAcF,QACxC,SAAC5G,GAAD,OAAUA,EAAKG,UAAY,IAAIjI,IAAU8H,EAAKG,SAASvJ,eAAe+J,cAAc,MAGhFuG,EAAsBH,EAAcH,QACxC,SAAC5G,GAAD,OAAUA,EAAKG,UAAY,IAAIjI,IAAU8H,EAAKG,SAASvJ,eAAe+J,cAAc,MAGhFwG,EAAYlO,uBAChB,SAACmO,GACC,IAAIC,EAA+CD,EAAeE,KAAI,SAACtH,GACrE,IAAKA,EAAKuH,sBAAwBvH,EAAKlK,WAAW0R,UAChD,OAAOxH,EAET,IAAMyH,EAAiB,IAAIvP,IAAU8H,EAAKuH,qBAAqBlP,MAAM2H,EAAKlK,WAAW0R,WACrF,EAAyClB,EACrCoB,YAAW,IAAIxP,IAAU8H,EAAK2H,YAAaxQ,EAAWsQ,EAAgBzH,EAAKE,YAAY0H,IAAQC,UAC/F,CAAExC,eAAgB,EAAGC,aAAc,GAF/BD,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,aAIxB,OAAO,2BAAKtF,GAAZ,IAAkB9I,IAAKmO,EAAgBC,eAAcvD,UAAW0F,OAGlE,GAAI5B,EAAO,CACT,IAAMiC,EAAiBC,YAASlC,EAAMmC,eACtCX,EAAwBA,EAAsBT,QAAO,SAAC5G,GACpD,OAAO+H,YAAS/H,EAAKqB,SAAS2G,eAAe3J,SAASyJ,MAG1D,OAAOT,IAET,CAAClQ,EAAW0O,EAAOS,IAOf2B,EAAc9B,iBAAuB,MAE3C,GAAwD/O,mBAnF1B,IAmF9B,qBAAO8Q,GAAP,MAA6BC,GAA7B,MACA,GAA0C/Q,oBAAS,GAAnD,qBAAOgR,GAAP,MAAsBC,GAAtB,MAEMC,GAAsBvQ,mBAAQ,WAClC,IAAIwQ,EAAc,GAmClB,OAVIjC,IACFiC,EAA2BpB,EAAbV,EAAuBO,EAA6BL,IAEhEN,IACFkC,EAA2BpB,EAAbV,EAAuBQ,EAAiCH,IAEpEV,IACFmC,EAA2BpB,EAAbV,EAAuBS,EAAiCH,IA9BtD,SAACyB,GACjB,OAAQvC,GACN,IAAK,MACH,OAAOwC,kBAAQD,GAAO,SAACxI,GAAD,OAA+BA,EAAK9I,IAAM8I,EAAKsF,eAAc,QACrF,IAAK,aACH,OAAOmD,kBACLD,GACA,SAACxI,GAAD,OAAgCA,EAAKrK,WAAa+S,OAAO1I,EAAKrK,WAAWgT,MAAM,GAAI,IAAM,IACzF,QAEJ,IAAK,SACH,OAAOF,kBACLD,GACA,SAACxI,GAAD,OAAgCA,EAAKG,SAAWuI,OAAO1I,EAAKG,SAASvB,UAAY,IACjF,QAEJ,IAAK,YACH,OAAO6J,kBAAQD,GAAO,SAACxI,GAAD,OAA+B0I,OAAO1I,EAAK+B,aAAY,QAC/E,QACE,OAAOyG,GAcNI,CAAUL,GAAaI,MAAM,EAAGT,MACtC,CACDjC,EACAU,EACAQ,EACAL,EACAC,EACAT,EACAD,EACAD,EACAc,EACAD,EACAR,EACAO,EACAkB,KAGFhC,EAAkB2C,QAAUP,GAAoBQ,OAEhDC,qBAAU,WAaHX,KACsB,IAAIY,sBAbT,SAACC,GACrB,YAAgBA,EAAhB,MACUC,gBACRf,IAAwB,SAACgB,GACvB,OAAIA,GAAyBjD,EAAkB2C,QACtCM,EAnJa,GAqJfA,OAMsD,CAC/DC,WAAY,MACZC,UAAW,IAEIC,QAAQrB,EAAYY,SACrCR,IAAiB,MAElB,CAACC,GAAqBF,KAETE,GAAoBhB,KAAI,SAACtH,GACvC,IAAQnK,EAAsBmK,EAAtBnK,MAAOC,EAAekK,EAAflK,WACT2M,EAAe5M,EAAMyJ,QACrBkD,EAAoB1M,EAAWwJ,QAC/B1K,EAAUoL,EAAKqB,UAAYrB,EAAKqB,SAASnL,MAAM,KAAK,GAAGiM,cAAc5I,QAAQ,UAAW,IAiC9F,MA/BsB,CACpBrC,IAAK,CACHoC,MAAO6L,GAAcnF,EAAK9I,IAAK8I,EAAKsF,cACpC9J,IAAKwE,EAAKxE,IACV7F,WAAYqK,EAAKrK,WACjBf,UACAyM,SAAUrB,EAAKqB,SACfoB,eACAD,oBACArL,YACAoS,cAAevJ,EAAK9I,KAEtB8I,KAAM,CACJwJ,MAAO5U,EACP4G,IAAKwE,EAAKxE,IACV3F,MAAOmK,EAAKnK,MACZC,WAAYkK,EAAKlK,YAEnB2T,OAAQ,CACN7K,SAAUb,YAAiB,IAAI7F,IAAU8H,EAAKG,SAASvB,WACvDpD,IAAKwE,EAAKxE,KAEZuG,UAAW,CACTA,UAAW/B,EAAK+B,WAElBpM,WAAY,CACVA,WAAYqK,EAAKrK,YAEnB+T,QAAS1J,MAqDb,OACE,mCACE,eAAC2J,EAAA,EAAD,WACE,cAAC,GAAD,IACA,cAAC,IAAD,CAAS/O,MAAM,KAAKF,MAAM,OAAOF,GAAG,OAApC,SACG1F,EAAE,sCAEL,cAACkQ,GAAD,UACE,eAACE,GAAD,WACE,cAAC,GAAD,CAAgB1B,wBAAyByD,EAAoB6B,OAAS,IACtE,eAAC7D,GAAD,WACE,eAAC,KAAD,CAAMxK,GAAG,OAAT,cAAkB3F,EAAE,kBACpB,cAAC,KAAD,CAAQ8U,QAASnD,EAAYnM,SAAU,kBAAMoM,GAAeD,IAAa7L,MAAM,eAzDvF,eAACvF,EAAA,EAAD,WACE,cAAC,IAAD,CAAOwU,OAAK,EAACrE,KAAI,UAAKA,GAAtB,SACG8C,GAAoBhB,KAAI,SAACtH,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNhJ,WAAYmO,GAAcnF,EAAK9I,IAAK8I,EAAKsF,cACzCnO,UAAWA,EACXyF,QAASA,EACTlI,SAAS,GALJsL,EAAKxE,UAShB,cAAC,IAAD,CAAOqO,OAAK,EAACrE,KAAI,UAAKA,EAAL,YAAjB,SACG8C,GAAoBhB,KAAI,SAACtH,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNhJ,WAAYmO,GAAcnF,EAAK9I,IAAK8I,EAAKsF,cACzCnO,UAAWA,EACXyF,QAASA,EACTlI,SAAO,GALFsL,EAAKxE,UAShB,cAAC,IAAD,CAAOqO,OAAK,EAACrE,KAAI,UAAKA,EAAL,aAAjB,SACG8C,GAAoBhB,KAAI,SAACtH,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACNhJ,WAAYmO,GAAcnF,EAAK9I,IAAK8I,EAAKsF,cACzCnO,UAAWA,EACXyF,QAASA,EACTlI,SAAO,GALFsL,EAAKxE,aAkCfoB,IAAYgJ,GAAkBa,GAC7B,cAAC,IAAD,CAAMzR,eAAe,SAArB,SACE,cAAC8U,EAAA,EAAD,MAGJ,qBAAKC,IAAK9B,W,iCCvXlB,YAee1F,IAXkB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,kBAAmBC,EAAmB,EAAnBA,aAE/CuH,EAAoBC,cACpBC,EAAkC1H,EAAoBA,EAF5C2H,IAEyE,KACnFC,EAA6B3H,EAAeA,EAHlC0H,IAG0D,KAGpEE,EAAcD,GAAsBA,IAAuBJ,EAA4BI,EAAR,MACrF,MAAM,GAAN,OAFGF,GAA2BA,IAA4BF,EAA4BE,EAAR,MAE9E,YAAuBG,K,0JCkBnBC,EAAenW,IAAOC,IAAV,+DACN,SAACmW,GAAD,OAAWA,EAAMC,QAClB,SAACD,GAAD,OAAWA,EAAMC,QAGbC,EA5BuB,SAAC,GAAqB,IAGtDC,EAHqD,IAAlBF,YAAkB,MAAX,KAAW,EACjDG,EAAYC,qBAAWC,KAAvBF,QAGR,OAAQH,GACN,IAAK,KACHE,EAAIC,EAAQ,GACZ,MACF,IAAK,KACHD,EAAIC,EAAQ,GACZ,MACF,IAAK,KACL,QACED,EAAIC,EAAQ,GAGhB,OAAO,cAACL,EAAD,CAAcE,KAAME,KCLvBI,EAAqB3W,IAAOC,IAAV,qIAEF,SAACmW,GAAD,OAAWA,EAAMtG,MAAM8G,OAAOC,eAGvC,SAACT,GAAD,OAAWA,EAAMtG,MAAM0G,QAAQ,MAGtCM,EAAoB9W,IAAOC,IAAV,wCAIR8W,EA1BgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUrC,OAC3C,OACE,cAACgC,EAAD,UACGO,IAAMC,SAAShE,IAAI6D,GAAU,SAACK,EAAOC,GAAR,OAC5B,qCACE,cAACR,EAAD,UAAoBO,IACnBC,EAAIL,EAAI,GAAK,cAAC,EAAD,a,uBCelBM,EAAmBvX,IAAOC,IAAV,0MAGA,qBAAG6P,MAAkB8G,OAAOY,SAX7B,SAAC,GAAkC,IAAD,IAA/BC,iBAA+B,SAAZ3H,EAAY,EAAZA,MACzC,OAAI2H,EACK3H,EAAM4H,QAAQC,QAGhB7H,EAAM4H,QAAQE,SASZ,qBAAG9H,MAAkB8G,OAAOiB,QAKjCC,EAAc9X,YAAO+X,KAAP/X,CAAH,2LAOb,qBAAG8P,MAAkBC,aAAaiI,MAIlC,qBAAGlI,MAAkBC,aAAaC,MAKhCiI,EAAqBjY,YAAOsC,KAAPtC,CAAH,uGAmETkY,EA3D+B,SAAC,GASxC,IARL1V,EAQI,EARJA,IACAvB,EAOI,EAPJA,OACAkF,EAMI,EANJA,SACAD,EAKI,EALJA,YACAf,EAII,EAJJA,MACAzE,EAGI,EAHJA,gBACA0F,EAEI,EAFJA,WAEI,IADJuD,gBACI,MADO,GACP,EACIhJ,EAAMC,cAAND,EACFwX,EAAwB,MAAR3V,IAAgBA,EAatC,OACE,sBAAKwE,MAAO,CAAEoR,SAAU,YAAxB,UACE,eAACb,EAAD,CAAkBE,UAAWU,EAA7B,UACE,eAAC,IAAD,CAAMtX,eAAe,gBAAgBwX,GAAG,OAAxC,UACE,cAAC,KAAD,CAAM3O,SAAS,OAAf,SAAuBtD,IACvB,cAAC,KAAD,CAAMsD,SAAS,OAAf,SAAuB/I,EAAE,qBAAsB,CAAE2X,QAhBlC,SAACA,GACtB,GAAIH,EACF,MAAO,IAET,IAAMI,EAAmB,IAAIxU,YAAUuU,GACvC,OAAIC,EAAiB3T,GAAG,IAAM2T,EAAiBpP,GAAG,MACzCoP,EAAiB1K,iBAEnB0K,EAAiBnP,QAAQ,EAAGrF,YAAUsF,YAQmBL,CAAexG,UAE3E,eAAC,IAAD,CAAMZ,WAAW,WAAWf,eAAe,eAA3C,UACE,cAACiX,EAAD,CACEU,QAAO,8BAAyB7O,EAAzB,MACP8O,UAAU,UACVC,KAAK,MACLC,IAAI,IACJxS,SAAUA,EACVyS,YAAY,IACZzT,MAAOA,IAET,cAAC,IAAD,CAAQsB,MAAM,KAAKD,QAASN,EAAaI,GAAG,MAA5C,SACG3F,EAAE,SAEL,cAAC,KAAD,CAAM+I,SAAS,OAAf,SAAuBzI,UAG1BkX,GACC,eAACF,EAAD,CAAoBvO,SAAS,OAAOnD,MAAM,UAA1C,UACG5F,EAAE,sBADL,IAC6B,IAC3B,cAAC,KAAD,CAAM+I,SAAS,OAAOkD,MAAM,EAAO5L,KAAMN,EAAiBmY,UAAQ,EAACtS,MAAM,UAAzE,SACG5F,EAAE,eAAgB,CAAEM,qB,4GCxG3B6X,EAAoB9Y,YAAOkB,IAAPlB,CAAH,uFAkER0O,IA9C6B,SAAC,GAUtC,IATL1M,EASI,EATJA,QACAqF,EAQI,EARJA,IACA5G,EAOI,EAPJA,QACAyM,EAMI,EANJA,SACAlK,EAKI,EALJA,UACAD,EAII,EAJJA,IACAvB,EAGI,EAHJA,WACAqB,EAEI,EAFJA,WACAnC,EACI,EADJA,gBAEQC,EAAMC,cAAND,EACFmC,EAAU6F,YAAgBuE,GAChC,EAAwC6L,YAAY1R,GAA5Ce,EAAR,EAAQA,aAAc3F,EAAtB,EAAsBA,cACtB,EAA4B6G,aAC1B,cAAC,IAAD,CACE/D,UAAW5E,EAAE,eAAgB,CAAEM,OAAQR,IACvC+E,oBAAqB/C,EAAcgD,KAAK2C,GACxC1C,mBAAoBwH,EACpBvH,kBAAmB7C,EAAQyB,WAC3BC,kBAAmBxB,EAAUuB,WAC7BxB,IAAKA,EACLvB,WAAYA,EACZqB,WAAYA,EACZ+C,SAAUlF,EACVmF,QAAM,KAXHmT,EAAP,oBAoBA,OACE,eAACF,EAAD,CAAmBlX,WAAW,SAAS4E,QANf,SAACyS,GACzBA,EAAMC,kBACNF,KAIA,UACGnW,EADH,IAEe,oBAAZb,GACC,cAAC,KAAD,CAAYA,QAAQ,OAAOyE,MAAM,KAAK0S,GAAG,MAAzC,SACE,cAAC,IAAD,CAAerY,MAAM","file":"static/js/17.e40e060f.chunk.js","sourcesContent":["export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, TokenImage } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-right: 4px;\n`\n\nconst StyledTokenImage = styled.img`\n  width: 64px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]} LP</Heading>\n        <Flex justifyContent=\"center\">\n          {/* <MultiplierTag variant=\"primary\">{multiplier}</MultiplierTag> */}\n          <MultiplierTag variant=\"primary\" outline>60X</MultiplierTag>\n          <NoFeeTag />\n        </Flex>\n      </Flex>\n      <StyledTokenImage src=\"images/farms/farm_icon.svg\" alt=\"farm icon\" />\n      {/* <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StyledStakeButton = styled(Button)`\n  background-color: #FFCE41;\n  color: black;\n  box-shadow: none;\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <StyledStakeButton\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </StyledStakeButton>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst StyledHarvestButton = styled(Button)`\n  background-color: #FFCE41;\n  color: black;\n  box-shadow: none;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <StyledHarvestButton\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </StyledHarvestButton>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice(lpContract, 'approve', [\n        masterChefContract.address,\n        ethers.constants.MaxUint256,\n      ])\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n`\n\nconst StyledEnableButton = styled(Button)`\n  background-color: #FFCE41;\n  color: black;\n  box-shadow: none;\n`\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <StyledEnableButton width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable')}\n      </StyledEnableButton>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n        <Flex>\n          <Text textTransform=\"uppercase\" pr=\"4px\">\n            CAKE\n          </Text>\n          <Text textTransform=\"uppercase\">\n            {t('Earn : ')}\n          </Text>\n          <Text bold textTransform=\"uppercase\">\n            {displayBalance}\n          </Text>\n        </Flex>\n        <HarvestAction earnings={earnings} pid={pid} />\n      </Flex>\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport UnlockWalletButton from 'components/UnlockWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst StyledEnableButton = styled(Button)`\r\n  background-color: #FFCE41;\r\n  color: black;\r\n  box-shadow: none;\r\n`\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmStakeActionsContainerProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst StakeActionsContainer: React.FC<FarmStakeActionsContainerProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <StyledEnableButton width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable')}\r\n      </StyledEnableButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!account ? <UnlockWalletButton width=\"100%\" variant=\"black\" mr=\"5px\" /> : renderApprovalOrStakeButton()}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StakeActionsContainer\r\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport StakeActionsContainer from './StakeActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n  background: transparent;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  padding-bottom: 0px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  padding-top: 0px;\n  overflow: hidden;\n`\n\nconst Space = styled.div`\n  background: linear-gradient(90deg, #FFFFFF 0%, #000000 50%, #FFFFFF 100%);\n  opacity: 0.4;\n  height: 1px;\n  width: 100%;\n  margin-bottom: 16px;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <StyledCard>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        <Space />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\" >\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\" mb=\"16px\" >\n          <Text>{t('Stake')}:</Text>\n          <Text bold>{lpLabel}</Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" mb=\"16px\" >\n          <Text>{t('Earn')}:</Text>\n          {/* <Text bold>{earnLabel}</Text> */}\n          <Text bold>{t('EGG')}</Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" mb=\"16px\" >\n          <Text>{t('Deposite Fee')}:</Text>\n          <Text bold>0%</Text>\n        </Flex>\n        <Space />\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n      <ExpandingWrapper>\n        <Flex justifyContent=\"space-between\">\n          <Flex flex=\"1\">\n            <StakeActionsContainer\n              farm={farm}\n              lpLabel={lpLabel}\n              account={account}\n              cakePrice={cakePrice}\n              addLiquidityUrl={addLiquidityUrl}\n            />\n          </Flex>\n          <Flex flex=\"1\" justifyContent=\"center\">\n            <ExpandableSectionButton\n              onClick={() => setShowExpandableSection(!showExpandableSection)}\n              expanded={showExpandableSection}\n              showLabel={t('See More')}\n              closeLabel={t('See Less')}\n              border=\"#FFCE41\"\n            />\n          </Flex>\n        </Flex>\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} variant=\"primary\">\n        <ButtonMenuItem as={Link} to={`${url}`} endLeft>\n          {t('Active')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`} endRight>\n            {t('Inactive')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Heading, Link, Button } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport PageSection from 'components/PageSection'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst StyledHeroSection = styled(PageSection)`\r\n  padding: 0px;\r\n  background: transparent;\r\n`\r\n\r\nconst StyledMobileImage = styled.img`\r\n  display: block;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n  border-radius: 10px;\r\n`\r\n\r\nconst StyledDesktopImage = styled.img`\r\n  display: none;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n  border-radius: 10px;\r\n`\r\n\r\nconst Hero = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <>\r\n      <StyledHeroSection\r\n        innerProps={{ style: { padding: '0', margin: '0', width: '100%' } }}\r\n        index={2}\r\n        hasCurvedDivider={false}\r\n      >\r\n        <StyledMobileImage src=\"/images/farms/banner-mobile.jpg\" alt=\"banner\" />\r\n        <StyledDesktopImage src=\"/images/farms/banner.jpg\" alt=\"banner\" />\r\n      </StyledHeroSection>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex, Select, OptionProps } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Hero from './components/Hero'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n  padding: 32px 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n          }\n          return farmsCurrentlyVisible\n        })\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [chosenFarmsMemoized, observerIsSet])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Page>\n        <Hero />\n        <Heading scale=\"lg\" color=\"text\" mt=\"32px\">\n          {t('Stake LP Tokens To Earn INFINITY')}\n        </Heading>\n        <ControlContainer>\n          <ViewControls>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n            <ToggleWrapper>\n              <Text mr=\"10px\"> {t('Staked only')}</Text>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />              \n            </ToggleWrapper>            \n          </ViewControls>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n"],"sourceRoot":""}